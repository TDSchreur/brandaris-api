trigger:
  - master

pr:
  - master

variables:
  api-project: "src/Api/Api.csproj"
  fe-project: "src/TestFrontEnd/TestFrontEnd.csproj"
  configuration: "release"
  pool: Default
  azureSubscriptionId: "f395fc6c-f196-4abe-a248-e9b7d37c9f66"
  azureServiceConnection: "azure-sc"

stages:
  - stage: Api
    dependsOn: []
    jobs:
      - job: Build
        pool: $(pool)
        steps:
          - task: DotNetCoreCLI@2
            displayName: restore
            inputs:
              command: "restore"
              projects: $(api-project)

          - task: DotNetCoreCLI@2
            displayName: build
            inputs:
              command: "build"
              projects: $(api-project)
              arguments: "--no-restore -c $(configuration)"

          - task: DotNetCoreCLI@2
            displayName: publish
            inputs:
              command: "publish"
              projects: $(api-project)
              zipAfterPublish: true
              publishWebProjects: false
              arguments: "--no-build -c $(configuration) -o $(Build.ArtifactStagingDirectory)"

          - task: PublishBuildArtifacts@1
            displayName: "publish artifact api"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "api"
              publishLocation: "Container"

  - stage: FrontEnd
    dependsOn: []
    jobs:
      - job: Build
        pool: $(pool)
        steps:
          - task: DotNetCoreCLI@2
            displayName: restore
            inputs:
              command: "restore"
              projects: $(fe-project)

          - task: DotNetCoreCLI@2
            displayName: build
            inputs:
              command: "build"
              projects: $(fe-project)
              arguments: "--no-restore -c $(configuration)"

          - task: DotNetCoreCLI@2
            displayName: publish
            inputs:
              command: "publish"
              projects: $(fe-project)
              zipAfterPublish: true
              publishWebProjects: false
              arguments: "--no-build -c $(configuration) -o $(Build.ArtifactStagingDirectory)"

          - task: PublishBuildArtifacts@1
            displayName: "publish artifact frontend"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "frontend"
              publishLocation: "Container"

  - stage: Deploy
    dependsOn:
      - Api
      - Function
    jobs:
      - deployment: Deploy
        pool: $(pool)
        environment: brandaris
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: Biceps deployment via CLI
                  inputs:
                    azureSubscription: $(azureServiceConnection)
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: "az deployment group create -f $(Build.SourcesDirectory)/deploy/bicep/main.bicep -g brandaris -p $(Build.SourcesDirectory)/deploy/bicep/parameters.ci.json sql_administratorLoginPassword=$(SQL_ADMINISTRATORLOGINPASSWORD)"

                - task: AzureRmWebAppDeployment@4
                  displayName: Deploy API
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: $(azureServiceConnection)
                    appType: "apiApp"
                    WebAppName: "brandaris-api-biceps"
                    packageForLinux: "$(Pipeline.Workspace)/api/Api.zip"
#                - task: AzureFunctionApp@1
#                  displayName: Deploy Functions
#                  inputs:
#                    azureSubscription: $(azureServiceConnection)
#                    appType: 'functionApp'
#                    appName: 'nta7tp2n6crj4'
#                    package: '$(Pipeline.Workspace)/function/SecureFunction.zip'
#                    deploymentMethod: 'auto'
